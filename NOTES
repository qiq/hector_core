http://docs.bor.org.ua/eBooks/Perl/Manning.Extending_and_Embedding_Perl.2002.pdf

TODO:
	- rozdelit hectora na helen (core) a hectora (robot)
	- v helen udelat jen univerzalni server

Obecne

- C++ (+ nejake bindingy?)
	- predevsim kvuli velikosti retezcu, dostupnosti knihoven
- knihovny:
	- curl
	- c-ares: async DNS
	- libcurl: download
	- libxml2: config soubory, html parser, uri
	- libtidy (HTML -> XHTML)
- programy:
	- djbcache: name server
	- pdns_recursor, nebo si cachovat sam(?)
	- unbound?
- celkove: max. 8-16 GB RAM

Coding style:
- includes: C, C++ (+STL), other libs, local

Struktura

	- master, ktery zna vsechny domeny (ma v pameti)
		- muze jich byt vic, propojenych one-to-one
		- staci hashe domen (hash domain->robotid)
	- roboti, kteri znaji vsechna URL, co obsluhuji
		- maji je v pameti (teda staci jejich hashe, predpokladame, ze jsou jednoznacne)
		- + robots.txt

MASTER
	- prijima a prideluje domeny/URL ke zpracovani
	- vede si evidenci o domenach (ma v pameti)

ROBOT
	- ma seznam URL (v pameti)
	- ma obsah robots.txt ke svym domenam (taky v pameti)
	- udrzuje si fronty pozadavku na disku v souborech
	- pracuje jako s paskou, cte+modifikuje+zapisuje
	- cilova rychlost stahovani: 1000 stranek/s
	- cilovy pocet URL: 10 M na masinu (idealne vic)
		- priklady URL: vytahnout od Galambose seznam URL, zkusit zahashovat


Adresarova struktura:
/usr/lib/libhelen.so (sdilena knihovna pro server)
/usr/bin/client
/usr/bin/server
/usr/lib/hector/WebResource.so
/usr/lib/hector/Robot.so
/usr/lib/hector/modules/ReadResource.so
/usr/lib/hector/modules/perl/ReadResource.pm
/usr/lib/hector/modules/perl/Hector.pm
/usr/lib/hector/modules/perl/Hector.so
/usr/lib/hector/resources/TestResource.so
/usr/share/hector/skript.sh, nejake common.sh
/usr/include/hector/*.h (vse pro externi Resource a Module)

LD_LIBRARY_PATH += $PREFIX/lib/hector:$PREFIX/lib/hector/modules
PERL5LIB += $PREFIX/lib/hector/modules/perl
podobne pro python a javu

TODO

- otestovat Perl moduly na memory leaks (mockrat volat metody)

- nejaky generator webresources (do robota) + otestovat load a save
- client: zrychlit nabihani, implementovat reconnect

- Python & Java: PythonModule.cc + JavaModule.cc, implementovat, podobne jako pro Perl

- nejak vylepsit testy, pridat testy perlu/pythonu/javy
- do /usr/share/hector/skript.sh nejake common.sh

rozmyslet:
- predavani dat mezi procesy + synchronizace
	- mmap + ipc
	- serializace pres protocol buffers
	- zatim neni potreba, pokud bude, tak ozivit

- resource pro PML
	- zatim nedelat, az predelaji TreeX, tak se podivat, jestli uz maji rozumny interface :)
	- pomoci PML + prevod PML schematu do protocol buffers .proto nejakym
	  skriptem?
	- prevod do C++ struktury -- z ceho, PML schematu, nebo .proto?
	- prevod instanci PML z XML do protocol buffers

