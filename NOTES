- Init() is called twice -- first time with arguments, second time with NULL,
  reason is that first time own objects should be created, second time all
  other objects are created
- checkpoint: pauseInput, pockat, az budou vsude zpracovavane resources == 0, pak save_checkpoint
- bezny resource zpracovava vzdycky prave jedno vlakno
	- ale muze byt tzv. shared resource, ktery musi pouzivat mutex pro
	  pristup ke svym datum, pak ho muze pouzivat vice modulu najednou
- the Resource's id is unique (in memory) across all Resources

- aby bylo unikatni id pro resource, je potreba, aby se pouzivalo:
	- vytvareni resource pres rozhrani Resources (CreateResource), 
	- nebo aspon ziskani aktualni hodnoty resourceId z Resources
	- mazani pomoci specialni hodnoty status

- items property rika, kolik resources bylo uspesne zpracovano (nepocitaji se tam resources, ktere se nezpracovaly)

Obecne:
- system pro pousteni modulu na resources
- server se sklada z processing_engines
- processing_engine se sklada z processoru (pospojovanych pomoci front)
	- fronta ma prioritu, nejdrive se odebiraji prioritni joby
- processor obsahuje jeden, ci vice modulu
- modul zpracovava resource (resource je cokoliv, co je zabaleno do C++ objektu)


Obecne
- C++ a bindingy v dalsich jazycich (Perl, Python, Java -- pres SWIG)
	- C++ predevsim kvuli velikosti retezcu, dostupnosti knihoven a rychlosti
- knihovny:
	- libxml2: config soubory, html parser, uri

Coding style:
- includes: C, C++ (+STL), other libs, local

Adresarova struktura:
/usr/lib/libhector.so (sdilena knihovna pro server)
/usr/bin/hector_client
/usr/bin/hector_server
/usr/bin/hector_common.sh (to be included)
/usr/lib/hector/Robot.so (server modul)
/usr/lib/hector/modules/ReadResource.so
/usr/lib/hector/modules/perl/ReadResource.pm
/usr/lib/hector/modules/perl/Hector.pm
/usr/lib/hector/modules/perl/Hector.so
/usr/lib/hector/resources/WebResource.so
/usr/lib/hector/resources/TestResource.so
/usr/include/hector/*.{h,i} (vse pro externi Resource a Module, vcetne SWIG bindingu)

LD_LIBRARY_PATH += $PREFIX/lib/hector:$PREFIX/lib/hector/resources:$PREFIX/lib/hector/modules
PERL5LIB += $PREFIX/lib/hector/modules/perl
- podobne pro python a javu

Zajimava URL:

- http://docs.bor.org.ua/eBooks/Perl/Manning.Extending_and_Embedding_Perl.2002.pdf

OLD
rozmyslet:
- predavani dat mezi procesy + synchronizace
	- mmap + ipc
	- serializace pres protocol buffers
	- zatim neni potreba, pokud bude, tak ozivit

- resource pro PML
	- zatim nedelat, az predelaji TreeX, tak se podivat, jestli uz maji rozumny interface :)
	- obalit Perlovou reprezentaci, pridat factory s N vlakny a synchronizaci
