#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use LWP::UserAgent;
use Term::ReadLine;
use Getopt::Long;
Getopt::Long::Configure('no_ignore_case');
use Data::Dumper;

my $server = "localhost";
my $port = "1100";
my $term;
my $ua;
my $propertyNames;
my %commands = (
	"get" => 1,
	"set" => 1,
	"process" => 1,
	"shutdown" => 1,
	"quit" => 1
);

my $interactive = 0;
my $command = undef;
my $verbose = 0;
my $help = 0;
my $version = 0;

sub printHelp() {
	print <<END
usage: client.pl [options] [server[:port]]
options:
  --interactive, -i		Run interactive "shell"
  --command=cmd, -c		Run one command and exit
  --verbose, -v                 Be verbose
  --help, -h                    This help
  --version, -V                 Version information

Default server:port is localhost:1100
END
}

sub printVersion() {
	print "client.pl (", $term->ReadLine, ")\n";
	exit(0);
}

sub getProperty {
	my ($objectId, $property) = @_;
	my $req = HTTP::Request->new(GET => "http://$server:$port/$objectId.$property");
	my $res = $ua->request($req);
	die("Server error: ".$res->message()) if ($res->code >= 500);
	return $res->is_success ? $res->content : undef;
}

sub getPropertyList {
	my ($objectId) = @_;
	$objectId = "" if (not defined $objectId);
	my $req = HTTP::Request->new(GET => "http://$server:$port/$objectId");
	my $res = $ua->request($req);
	die("Server error: ".$res->message()) if ($res->code >= 500);
	if ($res->is_success) {
		my @result = split(/[\r\n]+/, $res->content);
		return \@result;
	} else {
		return undef;
	}
}

sub setProperty {
	my ($objectId, $property, $value) = @_;
	my $req = HTTP::Request->new(SET => "http://$server:$port/$objectId.$property");
	$req->content($value);
	my $res = $ua->request($req);
	die("Server error: ".$res->message()) if ($res->code >= 500);
	return $res->is_success ? 1 : 0;
}

sub doProcess {
	my ($peName, $data) = @_;
	my $req = HTTP::Request->new(PROCESS => "http://$server:$port/$peName");
	$req->content($data);
	my $res = $ua->request($req);
	die("Server error: ".$res->message()) if ($res->code >= 500);
	return $res->is_success ? $res->content : undef;
}

sub saveHistory {
	my ($file) = @_;

	my $f;
	my $prev = '';
	open($f, ">$file") or return;
	foreach my $h ($term->GetHistory()) {
		next if ($h eq $prev);
		print $f $h."\n";
		$prev = $h;
	}
	close($f);
}

sub loadHistory {
	my ($file) = @_;

	my $f;
	open($f, "<$file") or return;
	while (<$f>) {
		chomp;
		$term->addhistory($_);
	}
	close($f);
}

# get property names for autocomplete and wildcards
sub loadPropertyNames {
	my $objects = getPropertyList(undef);
	die("Cannot connect to server ($server:$port): cannot list objects") if (not defined $objects);
	foreach my $o (@{$objects}) {
		my $prop = getPropertyList($o);
		foreach my $p (@{$prop}) {
			$propertyNames->{$o.".".$p} = 1;
		}
	}
}

sub shutdown {
	my $req = HTTP::Request->new(SHUTDOWN => "http://$server:$port/");
	my $res = $ua->request($req);
	die("Server error: ".$res->message()) if ($res->code >= 500);
	return $res->is_success ? 1 : 0;
}

sub doComplete {
	my ($text, $line, $start) = @_;
	my @result;

	my $l = $line;

	# command
	my $cmd;
	if ($l =~ /^\s*(\w*)/) {
		my $c = lc($1);
		if (defined $commands{$c}) {
			$cmd = $c;
			$l =~ s/^\s*\w*//;
			if ($l eq '') {
				push(@result, $cmd);
				return @result;
			}
		} else {
			foreach my $x (keys %commands) {
				if ($c eq '' or (length($c) <= length($x) and substr($x, 0, length($c)) eq $c)) {
					push(@result, $x);
				}
			}
			return @result;
		}
	}

	# property
	if (($cmd eq 'get' or $cmd eq 'set') and $l =~ /^\s*(\S*)$/) {
		my $property = $1;
		foreach my $p (keys %{$propertyNames}) {
			if ($property eq '' or (length($property) <= length($p) and substr($p, 0, length($property)) eq $property)) {
				push(@result, $p);
			}
		}
	} elsif ($cmd eq 'set' and $l !~ /=/) {
		# set object.property = xxx
		push(@result, "=");
	}
	
	return @result;
};


# initialize
$term = new Term::ReadLine "HectorClient";
$term->Attribs->{completion_function} = \&doComplete;
$term->MinLine(undef);
$ua = LWP::UserAgent->new();
$ua->agent("HectorClient");

# parse command line
GetOptions(
	"interactive|i" => \$interactive,
	"command|c=s" => \$command,
	"verbose|v" => \$verbose,
	"help|h" => \$help,
	"version|V" => \$version
) or die;
&printHelp() if ($help);
&printVersion() if ($version);
if (@ARGV > 0) {
	my @sh = split(/:/, shift(@ARGV));
	if (@sh == 1) {
		$server = $sh[0];
	} else {
		($server, $port) = @sh;
	}
}

&loadPropertyNames() if ($interactive);

# main-loop

# commands:
# process processing_engine_name (data is read/written using stdin/stdout)
# get object.property
# set object.property = xxx
# shutdown
# quit

# load history
my $homeDir = $ENV{HOME} || (getpwuid($<))[7];
my $file = "$homeDir/.hector_history";
&loadHistory($file) if ($interactive);

my $last_command = '';
my $finished = 0;
while (!$finished) {
	if ($interactive) {
		$_ = $term->readline("$server> ");
	} elsif (not defined $command) {
		$_ = <STDIN>;
	} else {
		$_ = $command;
		$finished = 1;
	}
	last if (not defined $_);
	chomp;
	s/^\s*//;
	s/\s*$//;
	if (/\S/) {
		my $l = $_;

		# command
		my $cmd;
		if ($_ =~ /^(\w*)/) {
			my $c = lc($1);
			if (defined $commands{$c}) {
				$cmd = $c;
				$l =~ s/^\w*\s*//;
			} else {
				print STDERR "Unknown command: $c\n";
				next;
			}
		}

		if ($cmd eq 'get') {
			if ($l =~ /\S/) {
				if ($l =~ /^([^\.]*)\.(\S*)\s*/) {
					my ($object, $property) = ($1, $2);
					if ($object ne '*' and $property ne '*') {
						my $result = getProperty($object, $property);
						if (defined $result) {
							print "$object.$property = $result\n";
							$term->addhistory($_) if ($interactive and $_ ne $last_command);
						} else {
							print STDERR "Unknown object/property: $l\n";
						}
					} else {
						# wildcards
						&loadPropertyNames() if (not defined $propertyNames);
						$term->addhistory($_) if ($interactive and $_ ne $last_command);
						my $pattern;
						if ($object eq '*' and $property eq '*') {
							$pattern = '.*';
						} elsif ($object eq '*') {
							$pattern = ".*\.$property\$";
						} else {
							$pattern = "^$object\.";
						}
						foreach my $p (sort keys %{$propertyNames}) {
							if ($p =~ /$pattern/) {
								$p =~ /([^\.]*)\.(.*)/;
								my ($object, $property) = ($1, $2);
								my $result = getProperty($object, $property);
								if (defined $result) {
									print "$object.$property = $result\n";
								}
							}
						}
					}
				} else {
					print STDERR "Invalid object/property: $l\n";
				}
			} else {
				print STDERR "No object.property given\n";
			}
		} elsif ($cmd eq 'set') {
			if ($l =~ /\S/) {
				if ($l =~ /^([^\.]*)\.(\S*)\s*=\s*(.*)/) {
					my $result = setProperty($1, $2, $3);
					if ($result != 0) {
						$term->addhistory($_) if ($interactive and $_ ne $last_command);
					} else {
						print STDERR "Unknown object/property: $l\n";
					}
				} else {
					if ($l =~ /=\s*\S/) {
						print STDERR "Unknown object/property: $l\n";
					} else {
						print STDERR "Missing value: $l\n"
					}
				}
			} else {
				print STDERR "No object.property given\n";
			}
		} elsif ($cmd eq 'process') {
			if ($l =~ /\S/) {
				my $data = '';
				while (<STDIN>) {
					$data .= $_;
				}
				$data = doProcess($l, $data);
				if (not defined $data) {
					print STDERR "Cannot process resources\n";
				} else {
					print $data;
				}
			} else {
				print STDERR "No ProcessingEngine name given\n";
			}
		} elsif ($cmd eq 'shutdown') {
			if (&shutdown()) {
				$term->addhistory($_) if ($interactive and $_ ne $last_command);
				last;
			} else {
				print STDERR "Error shutting down\n";
			}
		} elsif ($cmd eq 'quit') {
			$term->addhistory($_) if ($interactive and $_ ne $last_command);
			last;
		}
	}
	$last_command = $_;
}
print "\nBye\n" if ($interactive);

# save history
&saveHistory($file) if ($interactive);
