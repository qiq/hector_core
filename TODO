- zakazat primou konstrukci resource objektu -- jen pres resourceregistry
	- i v Perlu!

- allocate more Resources at a time (an array of resources and put them into
  the available array), so that it does consume less memory (use MemoryPool).
	- must not delete resources, just Release() them

- PythonModule a reference counting -- je to spravne? Zkontrolovat, ze neleakuje

- jak je to s PE input/output queue v pripade, ze se pousti z jinych PE? A co jindy? Mozna nejak systematizovat
	robot/test6+

- dodelat save/restore checkpoint do vsech modulu (kde je to potreba)
	- Save.la -- aby se prepsala cast souboru, co se udelala od posledniho checkpointu

Coding style: 
- dokumentace ala doxygen

- obslehnout ze SWIG kod pro Javu, aby se daly psat moduly i v ni
	- Java: JavaModule.cc, implementovat, podobne jako pro Perl

- prepsat klienta do C++, aby to bylo rychle, LWP navazuje spojeni nejak
  pomalu, asi bude vyzadovat readline knihovnu, nebo ze bych obslehnul z
  libxml, nacitani i bez readline?
	- client: zrychlit nabihani, implementovat reconnect

DONE
ObjectValues -> ObjectProperties... prejmenovat

Format souboru s resources:
- type id (1B), nejvyssi bit rika, jestli je tam id + status
	- id (optional, 4B) + status (optional, 4B)
---- resource ----
	- size (4B) -- natvrdo nebo vubec
	- serialized resource

Save: - saveType, saveIdStatus
Load: - resourceType, loadIdStatus
- navrhnout API pro resource
	- zakladni metody: type, id, status, flags, (de-)serialization, attached resource, size, toString(Short), 
	- GetAttrString(ai) a GetAttrString("name")
- deleted vysledek v process -- jak predat na vystup?
	- nechat tak -- da se to otestovat :)
- jmena metod na velka pismena (krome getteru/setteru)
- python:
	- zrusit -threads pro SWIG a python (ne, budeme pouzivat jen jeden interpret)
	- jeden interpret pythonu (EmbeddedPython.cc), lazy-initialized
	- import modulu -- neni problem s vice vlakny, protoze se pristup totalne serializuje
	- resources taky tak.
- IpAddress object (ip4 i ip6, metoda isEmpty(), ...)
- nejak doresit unikatni resource id, asi se hodi, aby bylo vzdycky unikatni v
  ramci beziciho hectora
	- pozor na clone(!)
- kazdy server bude podporovat zakladni nastroje PE, bude mozne rozsireni prikazu
	- takze PROCESS/PASS/GET/SET/SHUTDOWN, se nebudou replikovat...

- fixnout PE's resourceCount + commit: castecne hotovo, je potreba, aby PE vedel, kolik se prave procesi resources
// - predelat callprocesingenginemodule na
//	- ne modul (aby jich slo udelat vic)
//	- aby umel PROCESS i PASS
	- aby umel i HTTP clienta (s keep-alive a automatickym obnovenim spojeni)
//- spatne resene delete: proste se smazat nesmi -- nastavit status na nejakou
//  magic hodnotu nebo tak neco a processor to preda na konec processing engine
	- uz to je OK, akorat je potreba zmenit Filter.cc, aby nastavil spravny status :)
//	- jeste vlastne zkontrolovat PE, ze pracuje spravne se smazanymi resources, uz nebudou NULL, ale zustanou present, dokud se nevyzvednou z fronty

- save/restore state 
	- pridat CHECKPOINT_SAVE, CHECKPOINT_RESTORE do serveru
- udelat shared resource, ktery bude zamykat uzivani -- muze si udelat kazdy resource zvlast
	- pridat zamek do websiteresource
- predelat resource field info na template
- upravit http server, aby akceptoval multi-line headers (nemelo by byt az tak
  tezke, proste klasicke zpozdene zapisovani), neni poradne otestovano(!)
- nastavit loglevel pro kazdy objekt zvlast
	- upravit Object.h, pridat jednu pseudo promennou
- podivat se na Clone(), jestli funguje spravne ve vsech resources
	- aby delal deep-copy
- modul nesmi mit pristup processing-engine (primo), kvuli vlaknum
	- stejne tak processor, tam se to musi osetrit
